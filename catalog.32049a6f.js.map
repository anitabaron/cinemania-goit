{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,aAMA,MAAMC,EAAS,CACbC,KAAM,EACNC,SAAU,QACVC,QAAS,oCAELC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cAAe,UAAUR,EAAOG,YAI9BM,EAAO,CAEXC,OAAQ,kDACRC,QAAS,mDACTV,KAAK,EACLW,SAAU,IAGNC,EAAgBC,IAClB,IAAIC,EAAYC,KAAKC,MAAMH,GACvBI,EAAYJ,EAAS,GAAK,GAAM,EAAI,EACpCK,EAAa,EAAIJ,EAAYG,EACjC,MAAO,GAAGE,EAAAC,SAASC,OAAOP,KAAaK,EAAAG,SAASD,OAC9CJ,KACEE,EAAAI,UAAUF,OAAOH,IAAa,EA4BhCM,EAAeC,IACjB,MAAMC,EAXiB,EAACC,EAAMC,KACjC,MAAMC,EAAW,GACjB,IAAKC,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,GAAK,EAC3BF,EAAKI,SAASL,EAAKG,GAAGG,KACzBJ,EAASK,KAAKP,EAAKG,GAAGK,MAG1B,OAAON,EAASO,MAAM,EAAE,GAAGC,KAAK,KAAK,EAIdC,CAAmBb,EAAMc,UAAWpB,EAAAqB,QAClDC,EAAchB,EAAMiB,aAAaN,MAAM,EAAG,GAC1CvB,EAASY,EAAMkB,aAAe,EAC9BC,EAAYhC,EAAcC,GAEhC,OADAgC,QAAQC,IAAIpB,IACL,EAAAP,EAAA4B,mBAAkBtB,EAAMQ,GAAIR,EAAMuB,cAAevB,EAAMwB,MAAOvB,EAAae,EAAaG,EAAU,EAEvGM,EAAuB,KACHC,SAASC,cAAc,mBAC7CC,eAAeC,UAAYnC,EAAAoC,sBAAsB,EAgBnD,SAASC,IACaL,SAASC,cAAc,SAC/BE,UAAYnC,EAAAsC,mB,CAE5B,MAAMC,EAAkBC,GACtB9D,EAAA+D,QACGC,IAAIF,EAAK,C,OAAE5D,KAAWI,IACtB2D,MAAKC,IACF,MAAMhC,EAAOgC,EAAYC,KAAKC,QAAQlC,OAEtC,GAAI4B,EAAI3B,SAAS,OAEb,OAAa,IAATD,OACDyB,QAhES,CAAAO,IACpB,MACMG,EAAcf,SAASC,cAAc,SACrCe,EAAmBpD,KAAKC,MAAMD,KAAKqD,SAAWL,EAAYC,KAAKC,QAAQlC,QACvEsC,EAAcN,EAAYC,KAAKC,QAAQE,GAGvCG,GADWC,EACiBF,EAAYG,SADvBC,EALL,IAKmBF,EAAKxC,OAAS0C,EAAYF,EAAKnC,MAAM,EAAGqC,GAAa,MAAQF,GAAlF,IAACA,EAAME,EAEvB,MAAM5D,EAASwD,EAAY1B,aAAe,EACpCC,EAAYhC,EAAcC,GAEhCqD,EAAYZ,WAAW,EAAAnC,EAAAuD,cAAaL,EAAYpC,GAAIoC,EAAYrB,cAAeqB,EAAYpB,MAAOL,EAAW0B,EAAkB,EAwDvHK,CAAgBZ,GAGP,IAAThC,GAjCS,CAAC6C,IAClB,MAAMC,EAAgB1B,SAASC,cAAc,WAC7C,IAAI0B,EAA0B,GAC9BF,EAAOG,SAAUtD,IACbqD,GAAwDtD,EAAYC,EAAM,IAElFoD,EAAcvB,UAAUwB,CAAyB,EA+BzCE,CAAajB,EAAYC,KAAKC,SA7BhB,EAACgB,EAAYC,KAC/B,MACMC,EAAYF,EAAaC,EADP/B,SAASC,cAAc,oBAE/BE,WAAU,EAAAnC,EAAAiE,iBAAgBD,EAAS,EA2B/CE,CAAetB,EAAYC,KAAKsB,cAAe,KAJ3CpC,GAKJ,IAEHqC,OAAMC,IACHtC,IACAM,IACKX,QAAQC,IAAI0C,MAEDC,iBACdC,QAAQC,IAAI,CACdjC,EAAgBlD,EAAKC,QACrBiD,EAAgBlD,EAAKE,UACrB,EAERkF","sources":["src/js/api-catalog-page.js"],"sourcesContent":["import axios from 'axios';\nimport {genres, fullStar, halfStar, emptyStar, \n        heroFragment, topMoviesFragment, \n        pagesBtnStartup, emptyApiResponeHero, \n        emptyApiResponeCatalog} from './api-html-fragment.js'\n\nconst params = {\n  page: 1,\n  language: 'en-US',\n  api_key: '682127ed972e56f6bb70ae743d23c1d7',\n};\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization: `Bearer ${params.api_key}`,\n  },\n};\n\nconst urls = {\n\n  urlDay: `https://api.themoviedb.org/3/trending/movie/day`,\n  urlWeek: `https://api.themoviedb.org/3/trending/movie/week`,\n  page:1,\n  quantity: 20,\n};\n\nconst generateStars = rating => {\n    let fullStars = Math.floor(rating);\n    let halfStars = rating % 1 >= 0.5 ? 1 : 0;\n    let emptyStars = 5 - fullStars - halfStars;\n    return `${fullStar.repeat(fullStars)}${halfStar.repeat(\n      halfStars\n    )}${emptyStar.repeat(emptyStars)}`;\n  };\n  \nconst createHeroMovie = resResponse => {\n    const maxLength = 200;\n    const heroSection = document.querySelector('#hero');\n    const randomMovieIndex = Math.floor(Math.random() * resResponse.data.results.length);\n    const topDayMovie = resResponse.data.results[randomMovieIndex];\n    \n    const cutText = (text, maxLength) => text.length > maxLength ? text.slice(0, maxLength) + '...' : text;\n    const truncatedOverview = cutText(topDayMovie.overview, maxLength);\n    const rating = topDayMovie.vote_average / 2;\n    const starsHTML = generateStars(rating);\n\n    heroSection.innerHTML =heroFragment(topDayMovie.id, topDayMovie.backdrop_path, topDayMovie.title, starsHTML, truncatedOverview)\n  };\n\n//nie dziaÅ‚a\nconst movieGenresCompare = (arr1, arr2) => {\n\tconst finalArr = [];\n\tfor (i = 0; i < arr1.length; i += 1) {\n\t\t\t\tif (arr2.includes(arr1[i].id)) {\n\t\t\t\t\tfinalArr.push(arr1[i].name)\n\t\t\t\t}\n\t\t\t}\n\treturn finalArr.slice(0,2).join(\", \");\n}\n\nconst catalogItem = (movie) =>{\n    const movieGenres = movieGenresCompare(movie.genre_ids, genres)\n    const releaseYear = movie.release_date.slice(0, 4);\n    const rating = movie.vote_average / 2;\n    const starsHTML = generateStars(rating);\n    console.log(movieGenres)\n    return topMoviesFragment(movie.id, movie.backdrop_path, movie.title, movieGenres, releaseYear, starsHTML)\n}\nconst emptyResponseCatalog = ()=>{\n    const moviesCatalog = document.querySelector('#catalogSection');\n    catalogSection.innerHTML = emptyApiResponeCatalog\n}\nconst crateCatalog = (movies)=>{\n    const moviesCatalog = document.querySelector('#catalg');\n    let weekMoviesSectionFragment=\"\"\n    movies.forEach( (movie) =>{ \n        weekMoviesSectionFragment = weekMoviesSectionFragment + catalogItem(movie)\n    });\nmoviesCatalog.innerHTML=weekMoviesSectionFragment\n}\nconst createPagesBtn =(totalItems, itemsPerPage) =>{\n    const pagesBtnSection = document.querySelector('#pagesBtnSection');\n    const lastPage = (totalItems / itemsPerPage)\n    pagesBtnSection.innerHTML=pagesBtnStartup(lastPage)\n   \n}\n  function createDefaultHeroSection() {\n    const heroSection = document.querySelector('#hero');\n    heroSection.innerHTML = emptyApiResponeHero;}\n\nconst homePageApiData = url =>\n  axios\n    .get(url, { params, ...options })\n    .then(resResponse => {\n        const length=resResponse.data.results.length\n        //const length = 0\n        if (url.includes('day')) {\n            \n            if (length===0){\n               createDefaultHeroSection()\n               return;\n            }\n            createHeroMovie(resResponse)\n            return;\n        }\n        if (length===0){\n            emptyResponseCatalog()\n            return;\n          }\n        crateCatalog(resResponse.data.results)\n        createPagesBtn(resResponse.data.total_results, 20)\n        return;\n    })\n    .catch(error => {\n        emptyResponseCatalog()\n        createDefaultHeroSection()\n      return console.log(error)});\n\nconst homePageContent = async () => \n    await Promise.all([\n        homePageApiData(urls.urlDay),\n        homePageApiData(urls.urlWeek)\n      ]);\n\nhomePageContent();\n\n"],"names":["$2shzp","parcelRequire","$63f816236bb60c84$var$params","page","language","api_key","$63f816236bb60c84$var$options","method","headers","accept","Authorization","$63f816236bb60c84$var$urls","urlDay","urlWeek","quantity","$63f816236bb60c84$var$generateStars","rating","fullStars","Math","floor","halfStars","emptyStars","$94Fp6","fullStar","repeat","halfStar","emptyStar","$63f816236bb60c84$var$catalogItem","movie","movieGenres","arr1","arr2","finalArr","i","length","includes","id","push","name","slice","join","$63f816236bb60c84$var$movieGenresCompare","genre_ids","genres","releaseYear","release_date","vote_average","starsHTML","console","log","topMoviesFragment","backdrop_path","title","$63f816236bb60c84$var$emptyResponseCatalog","document","querySelector","catalogSection","innerHTML","emptyApiResponeCatalog","$63f816236bb60c84$var$createDefaultHeroSection","emptyApiResponeHero","$63f816236bb60c84$var$homePageApiData","url","default","get","then","resResponse","data","results","heroSection","randomMovieIndex","random","topDayMovie","truncatedOverview","text","overview","maxLength","heroFragment","$63f816236bb60c84$var$createHeroMovie","movies","moviesCatalog","weekMoviesSectionFragment","forEach","$63f816236bb60c84$var$crateCatalog","totalItems","itemsPerPage","lastPage","pagesBtnStartup","$63f816236bb60c84$var$createPagesBtn","total_results","catch","error","async","Promise","all","$63f816236bb60c84$var$homePageContent"],"version":3,"file":"catalog.32049a6f.js.map"}