{"mappings":"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","sources":["src/js/api-catalog-page.js"],"sourcesContent":["import axios from 'axios';\nimport {genres, fullStar, halfStar, emptyStar, \n        heroFragment, topMoviesFragment, \n        pagesBtnStartup, emptyApiResponeHero, \n        emptyApiResponeCatalog} from './api-html-fragment.js'\n\nconst params = {\n  page: 1,\n  language: 'en-US',\n  api_key: '682127ed972e56f6bb70ae743d23c1d7',\n};\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization: `Bearer ${params.api_key}`,\n  },\n};\n\nconst urls = {\n\n  urlDay: `https://api.themoviedb.org/3/trending/movie/day`,\n  urlWeek: `https://api.themoviedb.org/3/trending/movie/week`,\n  page:1,\n  quantity: 20,\n};\n\nconst generateStars = rating => {\n    let fullStars = Math.floor(rating);\n    let halfStars = rating % 1 >= 0.5 ? 1 : 0;\n    let emptyStars = 5 - fullStars - halfStars;\n    return `${fullStar.repeat(fullStars)}${halfStar.repeat(\n      halfStars\n    )}${emptyStar.repeat(emptyStars)}`;\n  };\n  \nconst createHeroMovie = resResponse => {\n    const maxLength = 200;\n    const heroSection = document.querySelector('#hero');\n    const randomMovieIndex = Math.floor(Math.random() * resResponse.data.results.length);\n    const topDayMovie = resResponse.data.results[randomMovieIndex];\n    \n    const cutText = (text, maxLength) => text.length > maxLength ? text.slice(0, maxLength) + '...' : text;\n    const truncatedOverview = cutText(topDayMovie.overview, maxLength);\n    const rating = topDayMovie.vote_average / 2;\n    const starsHTML = generateStars(rating);\n\n    heroSection.innerHTML =heroFragment(topDayMovie.id, topDayMovie.backdrop_path, topDayMovie.title, starsHTML, truncatedOverview)\n  };\n\n//nie dziaÅ‚a\nconst movieGenresCompare = (arr1, arr2) => {\n\tconst finalArr = [];\n\tfor (i = 0; i < arr1.length; i += 1) {\n\t\t\t\tif (arr2.includes(arr1[i].id)) {\n\t\t\t\t\tfinalArr.push(arr1[i].name)\n\t\t\t\t}\n\t\t\t}\n\treturn finalArr.slice(0,2).join(\", \");\n}\n\nconst catalogItem = (movie) =>{\n    const movieGenres = movieGenresCompare(genres, movie.genre_ids)\n    const releaseYear = movie.release_date.slice(0, 4);\n    const rating = movie.vote_average / 2;\n    const starsHTML = generateStars(rating);\n    return topMoviesFragment(movie.id, movie.backdrop_path, movie.title, movieGenres, releaseYear, starsHTML)\n}\nconst emptyResponseCatalog = ()=>{\n    const moviesCatalog = document.querySelector('#catalogSection');\n    catalogSection.innerHTML = emptyApiResponeCatalog\n}\nconst crateCatalog = (movies)=>{\n    const moviesCatalog = document.querySelector('#catalg');\n    let weekMoviesSectionFragment=\"\"\n    movies.forEach( (movie) =>{ \n        weekMoviesSectionFragment = weekMoviesSectionFragment + catalogItem(movie)\n    });\nmoviesCatalog.innerHTML=weekMoviesSectionFragment\n}\nconst createPagesBtn =(totalItems, itemsPerPage) =>{\n    const pagesBtnSection = document.querySelector('#pagesBtnSection');\n    const lastPage = Math.ceil(totalItems / itemsPerPage)\n    if(lastPage<2) return\n\n    pagesBtnSection.innerHTML=pagesBtnStartup(lastPage)\n   \n}\n  function createDefaultHeroSection() {\n    const heroSection = document.querySelector('#hero');\n    heroSection.innerHTML = emptyApiResponeHero;}\n\nconst catalogPageApiData = url =>\n  axios\n    .get(url, { params, ...options })\n    .then(resResponse => {\n        const length=resResponse.data.results.length\n        //const length = 0\n        if (url.includes('day')) {\n            \n            if (length===0){\n               createDefaultHeroSection()\n               return;\n            }\n            createHeroMovie(resResponse)\n            return;\n        }\n        if (length===0){\n            emptyResponseCatalog()\n            return;\n          }\n        crateCatalog(resResponse.data.results)\n        createPagesBtn(resResponse.data.total_results, 20)\n        return;\n    })\n    .catch(error => {\n        emptyResponseCatalog()\n        createDefaultHeroSection()\n      return console.log(error)});\n\nconst catalogPageContent = async () => \n    await Promise.all([\n        catalogPageApiData(urls.urlDay),\n        catalogPageApiData(urls.urlWeek)\n      ]);\n\ncatalogPageContent();\n\n\nconst searchPageApiData = url =>\n    axios\n        .get(url, { params, ...options })\n        .then(resResponse => {\n            const length=resResponse.data.results.length\n\n            if (document.querySelector('#catalg').hasChildNodes()) {\n                const childs = document.querySelectorAll(\"#catalg > li\");\n                childs.forEach(child => child.remove());\n            }\n            if (document.querySelector('#navForm')!==null)\n                document.querySelector(\"#navForm\").remove();\n            \n\n             if (length===0){\n                emptyResponseCatalog()\n                return;\n              }\n            //console.log(resResponse)\n            crateCatalog(resResponse.data.results)\n            createPagesBtn(resResponse.data.total_results, 20)\n            return;\n        })\n        .catch(error => {\n            emptyResponseCatalog()\n            return console.log(error)});\n\n class UrlSearch {\n\n        constructor({titel, adulds, page, country, year}){\n            this.inputs.queryTitle = titel\n            this.inputs.queryAdults = adulds\n            this.inputs.queryPages = page\n            this.inputs.queryRegion = country\n            this.inputs.queryYear = year\n        }\n        \n        setups={\n            coreUrl:\"https://api.themoviedb.org/3/search/movie\",\n            query:\"?\",\n            queryTitle:\"query=\",\n            queryAdults:\"&include_adult=\",       \n            queryPages:\"&page=\",\n            queryRegion:\"&region=\",\n            queryYear:\"&year=\"\n        }\n\n        inputs={\n            queryTitle:\"\",\n            queryAdults:\"\",       \n            queryPages:\"\",\n            queryRegion:\"\",\n            queryYear:\"\"\n        }\n\n        set pageNumber(number){\n               this.inputs.queryPages = number\n        }\n        set coreUrl(url){\n            this.setups.coreUrl = url\n        }\n\n        get url (){\n\n\n            return  (this.setups.coreUrl+\n                    this.setups.query+\n                    this.setups.queryTitle+\n                    this.inputs.queryTitle+\n                    this.setups.queryAdults+\n                    this.inputs.queryAdults+\n                    this.setups.queryPages+\n                    this.inputs.queryPages)\n        }\n\n        }\n\nwindow.addEventListener(\"click\" , event=>{\n    console.log(event.target.parentElement.id)\n    \n    try {\n        if (event.target.id ===\"searchBtn\") {\n            event.preventDefault();\n            console.log(document.querySelector('#catalogFormInput').value.trim())\n            if (document.querySelector('#catalogFormInput').value.trim()==\"\") {\n                return\n            }\n\n            const searchMovieTitle = document.querySelector('#catalogFormInput').value.trim()\n            let searchMovieRegion=\"\"\n            let searchMovieYear=\"\"\n\n            const titel= document.querySelector('#catalogFormInput').value.trim()\n            const adulds=\"false\"\n            const page = \"1\"\n            const country = \"US\"\n            const year = \"2024\"\n\n            const test = new UrlSearch({titel, adulds, page, country, year})\n\n\n            const searchUrl=`https://api.themoviedb.org/3/search/movie?query=${searchMovieTitle}&include_adult=false&page=1${searchMovieRegion}${searchMovieYear}` \n            \n            console.log(\"searchUrl: \", searchUrl)\n            console.log(\"url: \", test.url)\n\n            const searchPageContent = async () => await searchPageApiData(searchUrl)\n\n            searchPageContent(searchUrl);\n\n        }\n    } catch (error) {\n    console.error(error);\n    }\n  \n} )\n\n\n\n\n\n\n    // try {\n    //     if (event.target.parentElement.id ===\"navForm\"){\n    //         console.log(event.target.textContent)\n\n\n\n\n\n\n\n\n    //     }\n    //   } catch (error) {\n    //     console.error(\"ID is not define!\");\n    //   }\n      \n\n        \n\n\n\n\n"],"names":["$bpxeT","parcelRequire","$f8ea9dc2e6a98a8c$var$params","page","language","api_key","$f8ea9dc2e6a98a8c$var$options","method","headers","accept","Authorization","concat","$f8ea9dc2e6a98a8c$var$urls","$f8ea9dc2e6a98a8c$var$generateStars","rating","fullStars","Math","floor","halfStars","emptyStars","$8OCXI","fullStar","repeat","halfStar","emptyStar","$f8ea9dc2e6a98a8c$var$catalogItem","movie","movieGenres","arr1","arr2","finalArr","i","length","includes","id","push","name","slice","join","$f8ea9dc2e6a98a8c$var$movieGenresCompare","genres","genre_ids","releaseYear","release_date","vote_average","starsHTML","topMoviesFragment","backdrop_path","title","$f8ea9dc2e6a98a8c$var$emptyResponseCatalog","document","querySelector","catalogSection","innerHTML","emptyApiResponeCatalog","$f8ea9dc2e6a98a8c$var$crateCatalog","movies","moviesCatalog","weekMoviesSectionFragment","forEach","$f8ea9dc2e6a98a8c$var$createPagesBtn","totalItems","itemsPerPage","pagesBtnSection","lastPage","ceil","pagesBtnStartup","$f8ea9dc2e6a98a8c$var$createDefaultHeroSection","emptyApiResponeHero","$f8ea9dc2e6a98a8c$var$catalogPageApiData","url","$dIxxU","default","get","$parcel$interopDefault","$dDDEV","params","then","resResponse","data","results","text","maxLength","heroSection","randomMovieIndex","random","topDayMovie","truncatedOverview","overview","heroFragment","$f8ea9dc2e6a98a8c$var$createHeroMovie","total_results","catch","error","console","log","$f8ea9dc2e6a98a8c$var$catalogPageContent","$2TvXO","mark","_callee","Promise","all","$f8ea9dc2e6a98a8c$var$UrlSearch","UrlSearch","param","titel","adulds","country","year","$hKHmD","this","coreUrl","query","queryTitle","queryAdults","queryPages","queryRegion","queryYear","inputs","key","number","setups","window","addEventListener","event","target","parentElement","preventDefault","value","trim","searchMovieTitle","test","searchUrl","searchPageContent","hasChildNodes","querySelectorAll","child","remove"],"version":3,"file":"catalog.a5c531af.js.map"}